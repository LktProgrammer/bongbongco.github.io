---
layout: post
title: 힙 정렬(Heap Sort)
categories: [Programming]
tags: [Programming, Algorithm]
fullview: false
comments: true
published: true
use_math: false
---

힙 자료구조를 이용하여 정렬하는 방법으로, 힙에서는 항상 가장 큰 원소가 루트 노드가 되고, 삭제 연산을 수행하면 항상 루트 노드의 원소를 삭제하여 반환하는 특성이 있다. 그러므로 최대 힙에 대해서 원소의 개수만큼 삭제 연산을 수행하면 내림차순으로 정렬된 원소를 얻을 수 있고, 최소 힙에 대해서 원소의 개수만큼 삭제 연산을 수행하면 오름차순으로 정렬된 원소를 얻을 수 있다. 힙 정렬은 정렬할 원소들을 입력하여 최대 힙을 구성한다. 그리고 힙에 대해서 삭제 연산을 수행하여 얻은 원소를 마지막 자리에 배치하고 힙을 다시 최대 힙이 되도록 재구성하는 작업을 원소의 개수만큼 반복하면 오름차순의 정렬을 완성할 수 있다.

```python
def heapsort(a):
  def swap(a, i, j):
    tmp = a[i]
    a[i] = a[j]
    a[j] = tmp

  def siftdown(a, i, size):
    l = 2*i+1
    r = 2*i+2
    largest = i
    if l &lt;= size-1 and a[l] &gt; a[i]:
      largest = l
    if r &lt;= size-1 and a[r] &gt; a[largest]:
      largest = r
    if largest != i:
      swap(a, i, largest)
      siftdown(a, largest, size)

  def heapify(a, size)
    p = (size/2)-1
    while p&gt;=0:
      siftdown(a, p, size)
      p -= 1

  size = len(a)
  heapify(a, size)
  end = size-1
  while(end &gt; 0):
    swap(a, 0, end)
    siftdown(a, 0, end)
    end -= 1

arr = [1, 3, 2, 4, 9, 7]
heapsort(arr)
print(arr)
```
