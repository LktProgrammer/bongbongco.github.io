---
layout: post
title: Windows Exploit - Exploit 개요.
categories: [Exploit]
tags: [Exploit, Computer Sience, Pentest, Overflow]
fullview: false
comments: true
published: true
---

Exploit을 기본부터 천천히 정리해나가고자 한다. 이론적인 부분부터 알려진 취약점을 이용한 실습까지 진행할 것이고 주된 참고 문서는 [fuzzysecurity](https://www.fuzzysecurity.com) 의 Tutorial 이다.  
<br/>
![Start](https://bongbongco.github.io/images/2017/2017-01-04-Introduction-Exploit-1.jpg)  

## 1. 준비물

### Immunity Debugger
Immunity Debugger는 Ollydbg와 비슷하지만 Python을 지원하기 때문에 플러그인을 이용하여 exploit을 개발하는 데 편리합니다.

### Mona.py
Mona는 exploit을 개발하는 데 도움이되는 다양한 기능을 갖춘 도구입니다. 내려 받은 후 Immunity의 PyCommands 폴더에 넣으십시오.

### Pvefindaddr.py
Pvefindaddr는 Mona의 이전 버전입니다. 조금 오래되었지만 Mona에 아직 포팅되지 않은 기능이 있기 때문에 여전히 유용합니다. 내려 받은 후에 Immunity의 PyCommands 폴더에 넣으십시오.

### Metasploit Framework
우리는 Metasploit Framework를 광범위하게 사용할 것입니다. (대부분 exploit을 위한 쉘 코드를 생성하는 데 사용) Metasploit 이외에도 도움이 되는 여러 도구들이 포함된 Kali linux을 사용할 것을 권장합니다.

### 가상화 소프트웨어
무료로 사용할 수 있는 VirtualBox를 이용하면 손쉽게 진행할 수 있습니다. 하지만 사용이 가능하다면 VMware를 사용할 것을 권장합니다.

## 2. 오버플로우

일반적으로 우리가 익스플로잇을 작성할 때 프로그램에서 오버 플로우를 찾아야합니다. 이러한 버그는 Buffer Overflows (메모리 위치가 의도 한 것보다 많은 데이터를 받음) 또는 Stack Overflows (일반적으로 스택 끝을 넘어 쓴 버퍼 오버플로) 중 하나입니다. 이러한 오버플로가 발생할 때 우리가 찾고있는 두 가지가 있습니다. (1) 버퍼가 EIP (현재 명령어 포인터)를 덮어 써야하고 (2) CPU 레지스터 중 하나에 버퍼가 있어야 합니다. 아래의 x86 CPU 레지스터 목록을 각각의 기능과 함께 볼 수 있습니다. 우리가 기억해야 할 것은 이러한 레지스터들 이 우리의 버퍼 (및 쉘 코드)를 저장할 수 있다는 것입니다.

* EAX - 산술 연산에 사용되는 주 레지스터. 산술 연산 및 함수 반환 값 결과가 저장되는 누적 기라고도합니다.
* EBX - 기본 레지스터. DS 세그먼트의 데이터를 가리키는 포인터입니다. 프로그램 기본 주소를 저장하는 데 사용됩니다. 
* ECX - 카운터 레지스터는 종종 프로세스의 횟수를 나타내는 값을 저장하는 데 사용됩니다. 루프 및 문자열 연산에 사용됩니다.
* EDX - 범용 레지스터. I / O 작업에 사용됩니다. EAX를 64 비트로 확장합니다.
* ESI - 소스 인덱스 레지스터. DS 레지스터가 가리키는 세그먼트의 데이터를 가리키는 포인터. 문자열 및 배열 데이터를 읽을 위치의 오프셋 (offset) 주소를 보유합니다.
* EDI - 목적지 인덱스 레지스터.  ES 레지스터 세그먼트가 가리키는 데이터 (또는 대상)를 가리키는 포인터. 문자열 및 배열 데이터를 쓸 위치의 오프셋 (offset) 주소를 보유합니다.
* EBP - 기본 포인터. 스택의 데이터에 대한 포인터 (SS 세그먼트에서). 현재 스택 프레임의 아래쪽을 가리 킵니다. 지역 변수를 참조하는 데 사용됩니다.
* ESP - 스택 포인터 (SS 세그먼트에서). 현재 스택 프레임의 맨 위를 가리 킵니다. 지역 변수를 참조 하는 데 사용됩니다.
* EIP - 명령 포인터 (실행될 다음 명령의 주소를 보유 함)

## 3. 수행 방법

1. 지나치게 긴 문자열을 저장하는 프로그램을 찾습니다. 
2. 이 문자열은 EIP를 덮어 쓰며 그 일부는 CPU 레지스터에 저장합니다. 
3.  버퍼를 포함하는 레지스터를 가리키는 포인터를 찾습니다. 
4.  포인터를 우리 버퍼의 적절한 위치에 놓아서 EIP를 덮어 씁니다. 
5.  프로그램이 포인터에 도달하면 명령을 실행하고 버퍼를 포함하는 레지스터로 점프하고 마지막으로 
6.  버퍼를 저장하는 CPU 레지스터에 쉘 코드를 저장하십시오.  
본질적으로 우리는 실행 흐름을 하이재킹하여 우리가 제어하는 메모리 영역을 가리키게 합니다. 그렇게 할 수 있다면 원격으로 명령을 실행할 수 있습니다. 위의 목록은 단순하지만 공격이 어떻게 작동하는지를 알 수 있습니다.
